// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: profile.sql

package db

import (
	"context"
)

const createProfile = `-- name: CreateProfile :one
INSERT into profile (
    name,
    email,
    bio
) values (
    $1, $2, $3
    ) RETURNING id, name, email, bio, created_at
`

type CreateProfileParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Bio   string `json:"bio"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile, arg.Name, arg.Email, arg.Bio)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE from profile where id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProfile, id)
	return err
}

const getProfile = `-- name: GetProfile :one
SELECT id, name, email, bio, created_at from profile where id = $1 LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, id int64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Bio,
		&i.CreatedAt,
	)
	return i, err
}

const updateProfileBio = `-- name: UpdateProfileBio :exec
UPDATE profile set bio = $2 WHERE id = $1
`

type UpdateProfileBioParams struct {
	ID  int64  `json:"id"`
	Bio string `json:"bio"`
}

func (q *Queries) UpdateProfileBio(ctx context.Context, arg UpdateProfileBioParams) error {
	_, err := q.db.ExecContext(ctx, updateProfileBio, arg.ID, arg.Bio)
	return err
}

const updateProfileEmail = `-- name: UpdateProfileEmail :exec
UPDATE profile set email = $2 WHERE id = $1
`

type UpdateProfileEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateProfileEmail(ctx context.Context, arg UpdateProfileEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateProfileEmail, arg.ID, arg.Email)
	return err
}

const updateProfileName = `-- name: UpdateProfileName :exec
UPDATE profile set name = $2 WHERE id = $1
`

type UpdateProfileNameParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateProfileName(ctx context.Context, arg UpdateProfileNameParams) error {
	_, err := q.db.ExecContext(ctx, updateProfileName, arg.ID, arg.Name)
	return err
}
